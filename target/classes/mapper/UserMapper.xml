<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lucky.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.lucky.domain.User">
        <id column="userId" jdbcType="INTEGER" property="userId" />
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="email" jdbcType="VARCHAR" property="email" />
        <result column="role_id" jdbcType="INTEGER" property="role.roleId" />
    </resultMap>

    <resultMap id="UserRoleMap" type="com.lucky.domain.User">
        <id column="userId" property="userId" />
        <id column="username" property="username" />
        <id column="password" property="password" />
        <id column="email" property="email" />
        <association property="role" column="role_id" javaType="com.lucky.domain.Role"
                     resultMap="com.lucky.mapper.RoleMapper.BaseResultMap"></association>
    </resultMap>

    <sql id="Base_Column_List">
        userId, username, password, email
    </sql>

    <select id="selectById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user
        where userId = #{userId,jdbcType=INTEGER}
    </select>

    <select id="findUserAndRole" parameterType="java.lang.Integer" resultMap="UserRoleMap">
        select * from user, role where user.userId=#{id} and user.role_id=role.roleId
    </select>

    <select id="findByUsername" parameterType="java.lang.String" resultMap="UserRoleMap">
        select * from user, role where user.username=#{username} and user.role_id=role.roleId
    </select>

    <delete id="deleteById" parameterType="java.lang.Integer">
        delete from user
        where userId = #{userId, jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.lucky.domain.User">
        insert into user (userId, username, password, email, role_id)
        values (#{userId,jdbcType=INTEGER}, #{username, jdbcType=VARCHAR}, #{password, jdbcType=VARCHAR}, #{email, jdbcType=VARCHAR}, #{role.roleId, jdbcType=INTEGER})
    </insert>

   <insert id="insertSelective" parameterType="com.lucky.domain.User">
       insert into user
       <trim prefix="(" suffix=")" suffixOverrides=",">
           <if test="userId != null">
               userId,
           </if>
           <if test="username != null">
               username,
           </if>
           <if test="password != null">
               password,
           </if>
           <if test="email != null">
               email,
           </if>
           <if test="role != null">
               role_id,
           </if>
       </trim>
       <trim prefix="values (" suffix=")" suffixOverrides=",">
           <if test="userId != null">
               #{userId, jdbcType=INTEGER},
           </if>
           <if test="username != null">
               #{username, jdbcType=VARCHAR},
           </if>
           <if test="password != null">
               #{password, jdbcType=VARCHAR},
           </if>
           <if test="email != null">
               #{email, jdbcType=VARCHAR},
           </if>
           <if test="role != null">
               #{role.roleId, jdbcType=INTEGER},
           </if>
       </trim>
   </insert>

    <update id="updateByIdSelective" parameterType="com.lucky.domain.User">
        update user
        <set>
            <if test="username != null">
                username = #{username, jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password, jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email, jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                role_id = #{role.roleId, jdbcType=INTEGER},
            </if>
        </set>
        where userId = #{userId, jdbcType=INTEGER}
    </update>

    <update id="updateById" parameterType="com.lucky.domain.User">
        update user
        set username = #{username,jdbcType=VARCHAR},
        password = #{password, jdbcType=VARCHAR},
        email = #{email, jdbcType=VARCHAR},
        role_id = #{role.roleId, jdbcType=INTEGER},
        where userId = #{userId,jdbcType=INTEGER}
    </update>
</mapper>